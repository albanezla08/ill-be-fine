//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/INPUTS.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @INPUTS : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @INPUTS()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""INPUTS"",
    ""maps"": [
        {
            ""name"": ""Typewriter"",
            ""id"": ""2c69c1b3-3be0-451a-a26c-231c13083043"",
            ""actions"": [
                {
                    ""name"": ""stop"",
                    ""type"": ""Button"",
                    ""id"": ""ec1df73c-5b4d-4baa-be31-ee5715bbeefe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4df9a4a3-2b67-4151-beb1-9de02b5bc04f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""stop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CameraControls"",
            ""id"": ""31e099c7-e443-40f4-92f7-f9bd08cd1456"",
            ""actions"": [
                {
                    ""name"": ""zoom"",
                    ""type"": ""PassThrough"",
                    ""id"": ""6aa3881c-61cc-430f-9e61-5508772aafab"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""relocate"",
                    ""type"": ""Button"",
                    ""id"": ""76b75531-dfff-4ce7-93d1-16d9118eca4f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MaxFocus"",
                    ""type"": ""Button"",
                    ""id"": ""6d4c5dca-29a9-47f2-85e8-98a93665db61"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""70bc5789-087e-4bd4-abfd-5da102006ae1"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8c380303-a842-484c-931f-521c9d7f9646"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""relocate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""91679ad9-413c-46ac-aeba-b30b228ebc32"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""MultiTap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MaxFocus"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""TowerManipulation"",
            ""id"": ""3261e23a-0169-4e3b-a48d-db570c347c2e"",
            ""actions"": [
                {
                    ""name"": ""SelectDirectionForPennyRoller"",
                    ""type"": ""PassThrough"",
                    ""id"": ""7230f7d3-4825-45f4-8b76-a2bf1230eef9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GenericClickCheck"",
                    ""type"": ""Button"",
                    ""id"": ""9f309521-ffe0-45a6-b56b-96462388914d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0afcdd75-9c04-404c-8ff9-5de882bbec6b"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectDirectionForPennyRoller"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7af8e0d0-d291-49fe-b0a6-bbe7fa257e0d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GenericClickCheck"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""DialogueControls"",
            ""id"": ""851a883a-9fac-4384-9dbd-66031aa6ae07"",
            ""actions"": [
                {
                    ""name"": ""Next Line"",
                    ""type"": ""Button"",
                    ""id"": ""6021d131-8654-4100-8440-a449e37a9774"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b0a98d72-c1e5-4da9-a20f-f96162e5cfe7"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Next Line"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0a704309-412e-4792-b52f-2f6c9fbf4c69"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Next Line"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Typewriter
        m_Typewriter = asset.FindActionMap("Typewriter", throwIfNotFound: true);
        m_Typewriter_stop = m_Typewriter.FindAction("stop", throwIfNotFound: true);
        // CameraControls
        m_CameraControls = asset.FindActionMap("CameraControls", throwIfNotFound: true);
        m_CameraControls_zoom = m_CameraControls.FindAction("zoom", throwIfNotFound: true);
        m_CameraControls_relocate = m_CameraControls.FindAction("relocate", throwIfNotFound: true);
        m_CameraControls_MaxFocus = m_CameraControls.FindAction("MaxFocus", throwIfNotFound: true);
        // TowerManipulation
        m_TowerManipulation = asset.FindActionMap("TowerManipulation", throwIfNotFound: true);
        m_TowerManipulation_SelectDirectionForPennyRoller = m_TowerManipulation.FindAction("SelectDirectionForPennyRoller", throwIfNotFound: true);
        m_TowerManipulation_GenericClickCheck = m_TowerManipulation.FindAction("GenericClickCheck", throwIfNotFound: true);
        // DialogueControls
        m_DialogueControls = asset.FindActionMap("DialogueControls", throwIfNotFound: true);
        m_DialogueControls_NextLine = m_DialogueControls.FindAction("Next Line", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Typewriter
    private readonly InputActionMap m_Typewriter;
    private ITypewriterActions m_TypewriterActionsCallbackInterface;
    private readonly InputAction m_Typewriter_stop;
    public struct TypewriterActions
    {
        private @INPUTS m_Wrapper;
        public TypewriterActions(@INPUTS wrapper) { m_Wrapper = wrapper; }
        public InputAction @stop => m_Wrapper.m_Typewriter_stop;
        public InputActionMap Get() { return m_Wrapper.m_Typewriter; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TypewriterActions set) { return set.Get(); }
        public void SetCallbacks(ITypewriterActions instance)
        {
            if (m_Wrapper.m_TypewriterActionsCallbackInterface != null)
            {
                @stop.started -= m_Wrapper.m_TypewriterActionsCallbackInterface.OnStop;
                @stop.performed -= m_Wrapper.m_TypewriterActionsCallbackInterface.OnStop;
                @stop.canceled -= m_Wrapper.m_TypewriterActionsCallbackInterface.OnStop;
            }
            m_Wrapper.m_TypewriterActionsCallbackInterface = instance;
            if (instance != null)
            {
                @stop.started += instance.OnStop;
                @stop.performed += instance.OnStop;
                @stop.canceled += instance.OnStop;
            }
        }
    }
    public TypewriterActions @Typewriter => new TypewriterActions(this);

    // CameraControls
    private readonly InputActionMap m_CameraControls;
    private ICameraControlsActions m_CameraControlsActionsCallbackInterface;
    private readonly InputAction m_CameraControls_zoom;
    private readonly InputAction m_CameraControls_relocate;
    private readonly InputAction m_CameraControls_MaxFocus;
    public struct CameraControlsActions
    {
        private @INPUTS m_Wrapper;
        public CameraControlsActions(@INPUTS wrapper) { m_Wrapper = wrapper; }
        public InputAction @zoom => m_Wrapper.m_CameraControls_zoom;
        public InputAction @relocate => m_Wrapper.m_CameraControls_relocate;
        public InputAction @MaxFocus => m_Wrapper.m_CameraControls_MaxFocus;
        public InputActionMap Get() { return m_Wrapper.m_CameraControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraControlsActions set) { return set.Get(); }
        public void SetCallbacks(ICameraControlsActions instance)
        {
            if (m_Wrapper.m_CameraControlsActionsCallbackInterface != null)
            {
                @zoom.started -= m_Wrapper.m_CameraControlsActionsCallbackInterface.OnZoom;
                @zoom.performed -= m_Wrapper.m_CameraControlsActionsCallbackInterface.OnZoom;
                @zoom.canceled -= m_Wrapper.m_CameraControlsActionsCallbackInterface.OnZoom;
                @relocate.started -= m_Wrapper.m_CameraControlsActionsCallbackInterface.OnRelocate;
                @relocate.performed -= m_Wrapper.m_CameraControlsActionsCallbackInterface.OnRelocate;
                @relocate.canceled -= m_Wrapper.m_CameraControlsActionsCallbackInterface.OnRelocate;
                @MaxFocus.started -= m_Wrapper.m_CameraControlsActionsCallbackInterface.OnMaxFocus;
                @MaxFocus.performed -= m_Wrapper.m_CameraControlsActionsCallbackInterface.OnMaxFocus;
                @MaxFocus.canceled -= m_Wrapper.m_CameraControlsActionsCallbackInterface.OnMaxFocus;
            }
            m_Wrapper.m_CameraControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @zoom.started += instance.OnZoom;
                @zoom.performed += instance.OnZoom;
                @zoom.canceled += instance.OnZoom;
                @relocate.started += instance.OnRelocate;
                @relocate.performed += instance.OnRelocate;
                @relocate.canceled += instance.OnRelocate;
                @MaxFocus.started += instance.OnMaxFocus;
                @MaxFocus.performed += instance.OnMaxFocus;
                @MaxFocus.canceled += instance.OnMaxFocus;
            }
        }
    }
    public CameraControlsActions @CameraControls => new CameraControlsActions(this);

    // TowerManipulation
    private readonly InputActionMap m_TowerManipulation;
    private ITowerManipulationActions m_TowerManipulationActionsCallbackInterface;
    private readonly InputAction m_TowerManipulation_SelectDirectionForPennyRoller;
    private readonly InputAction m_TowerManipulation_GenericClickCheck;
    public struct TowerManipulationActions
    {
        private @INPUTS m_Wrapper;
        public TowerManipulationActions(@INPUTS wrapper) { m_Wrapper = wrapper; }
        public InputAction @SelectDirectionForPennyRoller => m_Wrapper.m_TowerManipulation_SelectDirectionForPennyRoller;
        public InputAction @GenericClickCheck => m_Wrapper.m_TowerManipulation_GenericClickCheck;
        public InputActionMap Get() { return m_Wrapper.m_TowerManipulation; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TowerManipulationActions set) { return set.Get(); }
        public void SetCallbacks(ITowerManipulationActions instance)
        {
            if (m_Wrapper.m_TowerManipulationActionsCallbackInterface != null)
            {
                @SelectDirectionForPennyRoller.started -= m_Wrapper.m_TowerManipulationActionsCallbackInterface.OnSelectDirectionForPennyRoller;
                @SelectDirectionForPennyRoller.performed -= m_Wrapper.m_TowerManipulationActionsCallbackInterface.OnSelectDirectionForPennyRoller;
                @SelectDirectionForPennyRoller.canceled -= m_Wrapper.m_TowerManipulationActionsCallbackInterface.OnSelectDirectionForPennyRoller;
                @GenericClickCheck.started -= m_Wrapper.m_TowerManipulationActionsCallbackInterface.OnGenericClickCheck;
                @GenericClickCheck.performed -= m_Wrapper.m_TowerManipulationActionsCallbackInterface.OnGenericClickCheck;
                @GenericClickCheck.canceled -= m_Wrapper.m_TowerManipulationActionsCallbackInterface.OnGenericClickCheck;
            }
            m_Wrapper.m_TowerManipulationActionsCallbackInterface = instance;
            if (instance != null)
            {
                @SelectDirectionForPennyRoller.started += instance.OnSelectDirectionForPennyRoller;
                @SelectDirectionForPennyRoller.performed += instance.OnSelectDirectionForPennyRoller;
                @SelectDirectionForPennyRoller.canceled += instance.OnSelectDirectionForPennyRoller;
                @GenericClickCheck.started += instance.OnGenericClickCheck;
                @GenericClickCheck.performed += instance.OnGenericClickCheck;
                @GenericClickCheck.canceled += instance.OnGenericClickCheck;
            }
        }
    }
    public TowerManipulationActions @TowerManipulation => new TowerManipulationActions(this);

    // DialogueControls
    private readonly InputActionMap m_DialogueControls;
    private IDialogueControlsActions m_DialogueControlsActionsCallbackInterface;
    private readonly InputAction m_DialogueControls_NextLine;
    public struct DialogueControlsActions
    {
        private @INPUTS m_Wrapper;
        public DialogueControlsActions(@INPUTS wrapper) { m_Wrapper = wrapper; }
        public InputAction @NextLine => m_Wrapper.m_DialogueControls_NextLine;
        public InputActionMap Get() { return m_Wrapper.m_DialogueControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DialogueControlsActions set) { return set.Get(); }
        public void SetCallbacks(IDialogueControlsActions instance)
        {
            if (m_Wrapper.m_DialogueControlsActionsCallbackInterface != null)
            {
                @NextLine.started -= m_Wrapper.m_DialogueControlsActionsCallbackInterface.OnNextLine;
                @NextLine.performed -= m_Wrapper.m_DialogueControlsActionsCallbackInterface.OnNextLine;
                @NextLine.canceled -= m_Wrapper.m_DialogueControlsActionsCallbackInterface.OnNextLine;
            }
            m_Wrapper.m_DialogueControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @NextLine.started += instance.OnNextLine;
                @NextLine.performed += instance.OnNextLine;
                @NextLine.canceled += instance.OnNextLine;
            }
        }
    }
    public DialogueControlsActions @DialogueControls => new DialogueControlsActions(this);
    public interface ITypewriterActions
    {
        void OnStop(InputAction.CallbackContext context);
    }
    public interface ICameraControlsActions
    {
        void OnZoom(InputAction.CallbackContext context);
        void OnRelocate(InputAction.CallbackContext context);
        void OnMaxFocus(InputAction.CallbackContext context);
    }
    public interface ITowerManipulationActions
    {
        void OnSelectDirectionForPennyRoller(InputAction.CallbackContext context);
        void OnGenericClickCheck(InputAction.CallbackContext context);
    }
    public interface IDialogueControlsActions
    {
        void OnNextLine(InputAction.CallbackContext context);
    }
}
